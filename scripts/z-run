#!/dev/null




::// do / examples / ...

::// debug / ...
::// release / ...
::// docs / ...
::// cargo / ...
::// workspace / ...




:: debug / build / z-exec :: exec -- "${ZRUN[@]}" ':: cargo / tool' build --bin z-exec -- "${@}"
:: release / build / z-exec :: exec -- "${ZRUN[@]}" ':: cargo / tool' build --bin z-exec --release -- "${@}"

:: docs / crate / internals / build :: exec -- "${ZRUN[@]}" ':: cargo / tool' doc --lib --no-deps --document-private-items "${@}"
:: docs / crate / exports / build :: exec -- "${ZRUN[@]}" ':: cargo / tool' doc --lib --no-deps "${@}"
:: docs / dependencies / build :: exec -- "${ZRUN[@]}" ':: cargo / tool' doc --lib "${@}"

:: cargo / debug / build :: exec -- "${ZRUN[@]}" ':: cargo / tool' build "${@}"
:: cargo / release / build :: exec -- "${ZRUN[@]}" ':: cargo / tool' build --release "${@}"

:: cargo / dependencies / update :: exec -- cargo update --aggressive "${@}"

<< cargo / tool
	test "${#}" -ge 1
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	export -- CARGO_TARGET_DIR="${_outputs}/target"
	
	cd -- "${_sources}"
	
	exec -- cargo "${@}"
!!




<< workspace / initialize / rust
	test "${#}" -eq 0
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	_target="${_outputs}/target"
	_release="${_outputs}/release"
	_debug="${_outputs}/debug"
	
	for _folder in "${_target}" "${_release}" "${_debug}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
	
	ln -s -T -f -- ../release "${_target}/release"
	ln -s -T -f -- ../debug "${_target}/debug"
	
	ln -s -T -f -- ./.outputs/target ./target
!!


<< workspace / initialize / outputs
	test "${#}" -eq 0
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/z-exec--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!




<< do
	if test "${__cargo_build:-true}" == true ; then
		"${ZRUN[@]}" ':: debug / build / z-exec'
	fi
	exec -- ./target/debug/z-exec "${@}"
!!




--<< do / examples / exec / __
	
	test "${#}" -eq 1
	_example="${1}"
	shift -- 1
	
	_source="./examples/${_example}.json"
	
	exec -- "${ZRUN[@]}" ':: do' execute-from \
			--from-file "${_source}" \
			--json \
	#
!!

--<< do / examples / dump / __
	
	test "${#}" -eq 1
	_example="${1}"
	shift -- 1
	
	_source="./examples/${_example}.json"
	_output="./examples/${_example}.txt"
	
	exec -- "${ZRUN[@]}" ':: do' execute-from \
			--from-file "${_source}" \
			--json \
			--dump-rust \
		>| "${_output}" \
	#
!!

<<== do / examples / generate
	#! <template>
	
	{{ $_examples := array "true" "env" }}
	{{ $_actions := array "dump" "exec" }}
	
	{{ range $_, $_action := $_actions }}
	
	{{ range $_, $_example := $_examples }}
	:: do / examples / {{ $_action }} / {{ $_example }} :: exec -- "${ZRUN[@]}" ':: do / examples / {{ $_action }} / __' {{ $_example | shell_quote }} "${@}"
	{{ end }}
	
	<< do / examples / {{ $_action }} / all
		"${ZRUN[@]}" ':: debug / build / z-exec'
		export -- __cargo_build=false
		{{ range $_, $_example := $_examples }}
		printf -- '[xx]  processing `%s` for `%s`...\n' '{{ $_action }}' {{ $_example | shell_quote }} >&2
		"${ZRUN[@]}" ':: do / examples / {{ $_action }} / __' {{ $_example | shell_quote }} "${@}"
		{{ end }}
	!!
	
	{{ end }}
!!

